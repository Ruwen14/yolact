{"format": "torch", "nodes": [{"name": "backbone", "id": 140023941637400, "class_name": "ResNetBackbone(\n  (layers): ModuleList(\n    (0): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (1): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (3): Bottleneck(\n        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (2): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (3): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (4): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (5): Bottleneck(\n        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n    (3): Sequential(\n      (0): Bottleneck(\n        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n        (downsample): Sequential(\n          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)\n          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        )\n      )\n      (1): Bottleneck(\n        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n      (2): Bottleneck(\n        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n        (relu): ReLU(inplace=True)\n      )\n    )\n  )\n  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)\n  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n  (relu): ReLU(inplace=True)\n  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n)", "parameters": [["layers.0.0.conv1.weight", [64, 64, 1, 1]], ["layers.0.0.bn1.weight", [64]], ["layers.0.0.bn1.bias", [64]], ["layers.0.0.conv2.weight", [64, 64, 3, 3]], ["layers.0.0.bn2.weight", [64]], ["layers.0.0.bn2.bias", [64]], ["layers.0.0.conv3.weight", [256, 64, 1, 1]], ["layers.0.0.bn3.weight", [256]], ["layers.0.0.bn3.bias", [256]], ["layers.0.0.downsample.0.weight", [256, 64, 1, 1]], ["layers.0.0.downsample.1.weight", [256]], ["layers.0.0.downsample.1.bias", [256]], ["layers.0.1.conv1.weight", [64, 256, 1, 1]], ["layers.0.1.bn1.weight", [64]], ["layers.0.1.bn1.bias", [64]], ["layers.0.1.conv2.weight", [64, 64, 3, 3]], ["layers.0.1.bn2.weight", [64]], ["layers.0.1.bn2.bias", [64]], ["layers.0.1.conv3.weight", [256, 64, 1, 1]], ["layers.0.1.bn3.weight", [256]], ["layers.0.1.bn3.bias", [256]], ["layers.0.2.conv1.weight", [64, 256, 1, 1]], ["layers.0.2.bn1.weight", [64]], ["layers.0.2.bn1.bias", [64]], ["layers.0.2.conv2.weight", [64, 64, 3, 3]], ["layers.0.2.bn2.weight", [64]], ["layers.0.2.bn2.bias", [64]], ["layers.0.2.conv3.weight", [256, 64, 1, 1]], ["layers.0.2.bn3.weight", [256]], ["layers.0.2.bn3.bias", [256]], ["layers.1.0.conv1.weight", [128, 256, 1, 1]], ["layers.1.0.bn1.weight", [128]], ["layers.1.0.bn1.bias", [128]], ["layers.1.0.conv2.weight", [128, 128, 3, 3]], ["layers.1.0.bn2.weight", [128]], ["layers.1.0.bn2.bias", [128]], ["layers.1.0.conv3.weight", [512, 128, 1, 1]], ["layers.1.0.bn3.weight", [512]], ["layers.1.0.bn3.bias", [512]], ["layers.1.0.downsample.0.weight", [512, 256, 1, 1]], ["layers.1.0.downsample.1.weight", [512]], ["layers.1.0.downsample.1.bias", [512]], ["layers.1.1.conv1.weight", [128, 512, 1, 1]], ["layers.1.1.bn1.weight", [128]], ["layers.1.1.bn1.bias", [128]], ["layers.1.1.conv2.weight", [128, 128, 3, 3]], ["layers.1.1.bn2.weight", [128]], ["layers.1.1.bn2.bias", [128]], ["layers.1.1.conv3.weight", [512, 128, 1, 1]], ["layers.1.1.bn3.weight", [512]], ["layers.1.1.bn3.bias", [512]], ["layers.1.2.conv1.weight", [128, 512, 1, 1]], ["layers.1.2.bn1.weight", [128]], ["layers.1.2.bn1.bias", [128]], ["layers.1.2.conv2.weight", [128, 128, 3, 3]], ["layers.1.2.bn2.weight", [128]], ["layers.1.2.bn2.bias", [128]], ["layers.1.2.conv3.weight", [512, 128, 1, 1]], ["layers.1.2.bn3.weight", [512]], ["layers.1.2.bn3.bias", [512]], ["layers.1.3.conv1.weight", [128, 512, 1, 1]], ["layers.1.3.bn1.weight", [128]], ["layers.1.3.bn1.bias", [128]], ["layers.1.3.conv2.weight", [128, 128, 3, 3]], ["layers.1.3.bn2.weight", [128]], ["layers.1.3.bn2.bias", [128]], ["layers.1.3.conv3.weight", [512, 128, 1, 1]], ["layers.1.3.bn3.weight", [512]], ["layers.1.3.bn3.bias", [512]], ["layers.2.0.conv1.weight", [256, 512, 1, 1]], ["layers.2.0.bn1.weight", [256]], ["layers.2.0.bn1.bias", [256]], ["layers.2.0.conv2.weight", [256, 256, 3, 3]], ["layers.2.0.bn2.weight", [256]], ["layers.2.0.bn2.bias", [256]], ["layers.2.0.conv3.weight", [1024, 256, 1, 1]], ["layers.2.0.bn3.weight", [1024]], ["layers.2.0.bn3.bias", [1024]], ["layers.2.0.downsample.0.weight", [1024, 512, 1, 1]], ["layers.2.0.downsample.1.weight", [1024]], ["layers.2.0.downsample.1.bias", [1024]], ["layers.2.1.conv1.weight", [256, 1024, 1, 1]], ["layers.2.1.bn1.weight", [256]], ["layers.2.1.bn1.bias", [256]], ["layers.2.1.conv2.weight", [256, 256, 3, 3]], ["layers.2.1.bn2.weight", [256]], ["layers.2.1.bn2.bias", [256]], ["layers.2.1.conv3.weight", [1024, 256, 1, 1]], ["layers.2.1.bn3.weight", [1024]], ["layers.2.1.bn3.bias", [1024]], ["layers.2.2.conv1.weight", [256, 1024, 1, 1]], ["layers.2.2.bn1.weight", [256]], ["layers.2.2.bn1.bias", [256]], ["layers.2.2.conv2.weight", [256, 256, 3, 3]], ["layers.2.2.bn2.weight", [256]], ["layers.2.2.bn2.bias", [256]], ["layers.2.2.conv3.weight", [1024, 256, 1, 1]], ["layers.2.2.bn3.weight", [1024]], ["layers.2.2.bn3.bias", [1024]], ["layers.2.3.conv1.weight", [256, 1024, 1, 1]], ["layers.2.3.bn1.weight", [256]], ["layers.2.3.bn1.bias", [256]], ["layers.2.3.conv2.weight", [256, 256, 3, 3]], ["layers.2.3.bn2.weight", [256]], ["layers.2.3.bn2.bias", [256]], ["layers.2.3.conv3.weight", [1024, 256, 1, 1]], ["layers.2.3.bn3.weight", [1024]], ["layers.2.3.bn3.bias", [1024]], ["layers.2.4.conv1.weight", [256, 1024, 1, 1]], ["layers.2.4.bn1.weight", [256]], ["layers.2.4.bn1.bias", [256]], ["layers.2.4.conv2.weight", [256, 256, 3, 3]], ["layers.2.4.bn2.weight", [256]], ["layers.2.4.bn2.bias", [256]], ["layers.2.4.conv3.weight", [1024, 256, 1, 1]], ["layers.2.4.bn3.weight", [1024]], ["layers.2.4.bn3.bias", [1024]], ["layers.2.5.conv1.weight", [256, 1024, 1, 1]], ["layers.2.5.bn1.weight", [256]], ["layers.2.5.bn1.bias", [256]], ["layers.2.5.conv2.weight", [256, 256, 3, 3]], ["layers.2.5.bn2.weight", [256]], ["layers.2.5.bn2.bias", [256]], ["layers.2.5.conv3.weight", [1024, 256, 1, 1]], ["layers.2.5.bn3.weight", [1024]], ["layers.2.5.bn3.bias", [1024]], ["layers.3.0.conv1.weight", [512, 1024, 1, 1]], ["layers.3.0.bn1.weight", [512]], ["layers.3.0.bn1.bias", [512]], ["layers.3.0.conv2.weight", [512, 512, 3, 3]], ["layers.3.0.bn2.weight", [512]], ["layers.3.0.bn2.bias", [512]], ["layers.3.0.conv3.weight", [2048, 512, 1, 1]], ["layers.3.0.bn3.weight", [2048]], ["layers.3.0.bn3.bias", [2048]], ["layers.3.0.downsample.0.weight", [2048, 1024, 1, 1]], ["layers.3.0.downsample.1.weight", [2048]], ["layers.3.0.downsample.1.bias", [2048]], ["layers.3.1.conv1.weight", [512, 2048, 1, 1]], ["layers.3.1.bn1.weight", [512]], ["layers.3.1.bn1.bias", [512]], ["layers.3.1.conv2.weight", [512, 512, 3, 3]], ["layers.3.1.bn2.weight", [512]], ["layers.3.1.bn2.bias", [512]], ["layers.3.1.conv3.weight", [2048, 512, 1, 1]], ["layers.3.1.bn3.weight", [2048]], ["layers.3.1.bn3.bias", [2048]], ["layers.3.2.conv1.weight", [512, 2048, 1, 1]], ["layers.3.2.bn1.weight", [512]], ["layers.3.2.bn1.bias", [512]], ["layers.3.2.conv2.weight", [512, 512, 3, 3]], ["layers.3.2.bn2.weight", [512]], ["layers.3.2.bn2.bias", [512]], ["layers.3.2.conv3.weight", [2048, 512, 1, 1]], ["layers.3.2.bn3.weight", [2048]], ["layers.3.2.bn3.bias", [2048]], ["conv1.weight", [64, 3, 7, 7]], ["bn1.weight", [64]], ["bn1.bias", [64]]], "output_shape": [[1, 256, 138, 138], [1, 512, 69, 69], [1, 1024, 35, 35], [1, 2048, 18, 18]], "num_parameters": [4096, 64, 64, 36864, 64, 64, 16384, 256, 256, 16384, 256, 256, 16384, 64, 64, 36864, 64, 64, 16384, 256, 256, 16384, 64, 64, 36864, 64, 64, 16384, 256, 256, 32768, 128, 128, 147456, 128, 128, 65536, 512, 512, 131072, 512, 512, 65536, 128, 128, 147456, 128, 128, 65536, 512, 512, 65536, 128, 128, 147456, 128, 128, 65536, 512, 512, 65536, 128, 128, 147456, 128, 128, 65536, 512, 512, 131072, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 524288, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 262144, 256, 256, 589824, 256, 256, 262144, 1024, 1024, 524288, 512, 512, 2359296, 512, 512, 1048576, 2048, 2048, 2097152, 2048, 2048, 1048576, 512, 512, 2359296, 512, 512, 1048576, 2048, 2048, 1048576, 512, 512, 2359296, 512, 512, 1048576, 2048, 2048, 9408, 64, 64]}, {"name": "fpn", "id": 140023495029536, "class_name": "FPN(\n  (lat_layers): RecursiveScriptModule(\n    original_name=ModuleList\n    (0): RecursiveScriptModule(original_name=Conv2d)\n    (1): RecursiveScriptModule(original_name=Conv2d)\n    (2): RecursiveScriptModule(original_name=Conv2d)\n  )\n  (pred_layers): RecursiveScriptModule(\n    original_name=ModuleList\n    (0): RecursiveScriptModule(original_name=Conv2d)\n    (1): RecursiveScriptModule(original_name=Conv2d)\n    (2): RecursiveScriptModule(original_name=Conv2d)\n  )\n  (downsample_layers): RecursiveScriptModule(\n    original_name=ModuleList\n    (0): RecursiveScriptModule(original_name=Conv2d)\n    (1): RecursiveScriptModule(original_name=Conv2d)\n  )\n)", "parameters": [["lat_layers.0.weight", [256, 2048, 1, 1]], ["lat_layers.0.bias", [256]], ["lat_layers.1.weight", [256, 1024, 1, 1]], ["lat_layers.1.bias", [256]], ["lat_layers.2.weight", [256, 512, 1, 1]], ["lat_layers.2.bias", [256]], ["pred_layers.0.weight", [256, 256, 3, 3]], ["pred_layers.0.bias", [256]], ["pred_layers.1.weight", [256, 256, 3, 3]], ["pred_layers.1.bias", [256]], ["pred_layers.2.weight", [256, 256, 3, 3]], ["pred_layers.2.bias", [256]], ["downsample_layers.0.weight", [256, 256, 3, 3]], ["downsample_layers.0.bias", [256]], ["downsample_layers.1.weight", [256, 256, 3, 3]], ["downsample_layers.1.bias", [256]]], "output_shape": [[[1, 256, 69, 69], [1, 256, 35, 35], [1, 256, 18, 18], [1, 256, 9, 9], [1, 256, 5, 5]]], "num_parameters": [524288, 256, 262144, 256, 131072, 256, 589824, 256, 589824, 256, 589824, 256, 589824, 256, 589824, 256]}, {"name": "proto_net.0", "id": 140023495029592, "class_name": "Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))", "parameters": [["weight", [256, 256, 3, 3]], ["bias", [256]]], "output_shape": [[1, 256, 69, 69]], "num_parameters": [589824, 256]}, {"name": "proto_net.1", "id": 140023495029648, "class_name": "ReLU(inplace=True)", "parameters": [], "output_shape": [[1, 256, 69, 69]], "num_parameters": []}, {"name": "proto_net.2", "id": 140023495029704, "class_name": "Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))", "parameters": [["weight", [256, 256, 3, 3]], ["bias", [256]]], "output_shape": [[1, 256, 69, 69]], "num_parameters": [589824, 256]}, {"name": "proto_net.3", "id": 140023495029760, "class_name": "ReLU(inplace=True)", "parameters": [], "output_shape": [[1, 256, 69, 69]], "num_parameters": []}, {"name": "proto_net.4", "id": 140023495029816, "class_name": "Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))", "parameters": [["weight", [256, 256, 3, 3]], ["bias", [256]]], "output_shape": [[1, 256, 69, 69]], "num_parameters": [589824, 256]}, {"name": "proto_net.5", "id": 140023495029872, "class_name": "ReLU(inplace=True)", "parameters": [], "output_shape": [[1, 256, 69, 69]], "num_parameters": []}, {"name": "proto_net.6", "id": 140023495029928, "class_name": "InterpolateModule()", "parameters": [], "output_shape": [[1, 256, 138, 138]], "num_parameters": []}, {"name": "proto_net.7", "id": 140023495029984, "class_name": "ReLU(inplace=True)", "parameters": [], "output_shape": [[1, 256, 138, 138]], "num_parameters": []}, {"name": "proto_net.8", "id": 140023495030040, "class_name": "Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))", "parameters": [["weight", [256, 256, 3, 3]], ["bias", [256]]], "output_shape": [[1, 256, 138, 138]], "num_parameters": [589824, 256]}, {"name": "proto_net.9", "id": 140023495030096, "class_name": "ReLU(inplace=True)", "parameters": [], "output_shape": [[1, 256, 138, 138]], "num_parameters": []}, {"name": "proto_net.10", "id": 140023495030152, "class_name": "Conv2d(256, 32, kernel_size=(1, 1), stride=(1, 1))", "parameters": [["weight", [32, 256, 1, 1]], ["bias", [32]]], "output_shape": [[1, 32, 138, 138]], "num_parameters": [8192, 32]}, {"name": "prediction_layers.0", "id": 140023493871320, "class_name": "PredictionModule(\n  (upfeature): Sequential(\n    (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n    (1): ReLU(inplace=True)\n  )\n  (bbox_layer): Conv2d(256, 12, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n  (conf_layer): Conv2d(256, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n  (mask_layer): Conv2d(256, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n)", "parameters": [["upfeature.0.weight", [256, 256, 3, 3]], ["upfeature.0.bias", [256]], ["bbox_layer.weight", [12, 256, 3, 3]], ["bbox_layer.bias", [12]], ["conf_layer.weight", [6, 256, 3, 3]], ["conf_layer.bias", [6]], ["mask_layer.weight", [96, 256, 3, 3]], ["mask_layer.bias", [96]]], "output_shape": [[[[0], [0], [0]], [0, 0, [0], [0]], [[0], [0], [0], [0]], [[0], [0], [0], 0, 0, 0]]], "num_parameters": [589824, 256, 27648, 12, 13824, 6, 221184, 96]}, {"name": "prediction_layers.1", "id": 140023493870704, "class_name": "PredictionModule()", "parameters": [], "output_shape": [[[[0], [0], [0]], [0, 0, [0], [0]], [[0], [0], [0], [0]], [[0], [0], [0], 0, 0, 0]]], "num_parameters": []}, {"name": "prediction_layers.2", "id": 140023493872720, "class_name": "PredictionModule()", "parameters": [], "output_shape": [[[[0], [0], [0]], [0, 0, [0], [0]], [[0], [0], [0], [0]], [[0], [0], [0], 0, 0, 0]]], "num_parameters": []}, {"name": "prediction_layers.3", "id": 140023493872160, "class_name": "PredictionModule()", "parameters": [], "output_shape": [[[[0], [0], [0]], [0, 0, [0], [0]], [[0], [0], [0], [0]], [[0], [0], [0], 0, 0, 0]]], "num_parameters": []}, {"name": "prediction_layers.4", "id": 140023493872328, "class_name": "PredictionModule()", "parameters": [], "output_shape": [[[[0], [0], [0]], [0, 0, [0], [0]], [[0], [0], [0], [0]], [[0], [0], [0], 0, 0, 0]]], "num_parameters": []}, {"name": "semantic_seg_conv", "id": 140023493869976, "class_name": "Conv2d(256, 1, kernel_size=(1, 1), stride=(1, 1))", "parameters": [["weight", [1, 256, 1, 1]], ["bias", [1]]], "output_shape": [[1, 1, 69, 69]], "num_parameters": [256, 1]}], "edges": []}